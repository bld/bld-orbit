(in-package :bld-orbit2)

(defclass cartstate ()
  (;; State slots
   (r :initarg :r :accessor r :documentation "Position vector")
   (v :initarg :v :accessor v :documentation "Velocity vector")
   ;; Parameter slots
   (cb :initarg :cb :accessor cb :documentation "Central body")
   (gfun :initarg :gfun :accessor gfun :documentation "Gravity function")
   (area :initarg :area :accessor area :documentation "Sail area")
   (mass :initarg :mass :accessor mass :documentation "Spacecraft mass")
   (pfun :initarg :pfun :accessor pfun :documentation "Pointing function")
   (afun :initarg :afun :accessor afun :documentation "Acceleration function")
   (bfun :initarg :bfun :accessor bfun :documentation "Basis function for pointing")
   (nfun :initarg :nfun :accessor nfun :documentation "Function to call getting sail normal vector from sail body frame")
   (iframe :initarg :iframe :accessor iframe :documentation "Inertial frame")
   (rs :initarg :rs :Accessor rs :documentation "Rotor wrt basis frame")
   (tm :initarg :tm :initform 0 :accessor tm :documentation "Stores time variable in state")
   ;; Derived slots
   (rm2 :documentation "Norm-squared of position vector")
   (rm :documentation "Norm of position vector")
   (ru :documentation "Unit position vector")
   (g :documentation "Gravitational acceleration")
   (p :documentation "Solar pressure")
   (bframe :documentation "Basis frame")
   (rb :documentation "Rotor of basis frame")
   (rp :documentation "Pointing rotor")
   (pframe :documentation "Pointing frame")
   (n :documentation "Sail normal vector")
   (a :documentation "External acceleration"))
  (:documentation "Cartesian state class"))

#+null(defmethod print-object ((x cartstate) stream)
  (format stream "#<CARTSTATE :r ~a :v ~a>" (r x) (v x)))

#+null(defstatearithmetic cartstate (r v) :oslots (cb gfun area mass pfun afun bfun nfun iframe rs tm))

(def-derived x cartstate
  (rm2 (norme2 (r x)))
  (rm (sqrt (rm2 x)))
  (ru (/ (r x) (rm x)))
  (g (funcall (gfun x) x))
  (p (solar-pressure x))
  (bframe (funcall (bfun x) x))
  (rb (recoverrotor (bframe x) (iframe x)))
  (rp (funcall (pfun x) x))
  (pframe (new-frame (rp x) (iframe x)))
  (n (funcall (nfun x) x))
  (a (funcall (afun x) x)))

(defmacro defcartesian (name &key cb gfun area mass pfun afun bfun nfun iframe rs)
  "Define a cartesian class"
  `(progn
     (defclass ,name (cartstate)
       ((cb :allocation :class :initform ,cb)
	(gfun :allocation :class :initform ,gfun)
	(area :allocation :class :initform ,area)
	(mass :allocation :class :initform ,mass)
	(pfun :allocation :class :initform ,pfun)
	(afun :allocation :class :initform ,afun)
	(bfun :allocation :class :initform ,bfun)
	(nfun :allocation :class :initform ,nfun)
	(iframe :allocation :class :initform ,iframe)
	(rs :allocation :class :initform ,rs)))
     (defstatearithmetic ,name (r v) :oslots (tm))
     (defmethod print-object ((x ,name) stream)
       (format stream ,(format nil "#<~a :r ~~a :v ~~a>" name) (r x) (v x)))))
